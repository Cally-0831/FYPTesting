<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">

  <!--
  <link rel="stylesheet" href="https://unpkg.com/buefy/dist/buefy.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@mdi/font@5.8.55/css/materialdesignicons.min.css">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css">
 -->

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">




  <title>FYP Scheduling System</title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  <% /* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <% /* <meta name="robots" content="noindex"> */%>


      <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

      <!--STYLES-->
      <link rel="stylesheet" href="/styles/importer.css">
      <link rel="stylesheet" href="/styles/layout.css">
      <!--STYLES END-->
</head>
<script defer src="https://use.fontawesome.com/releases/v5.10.0/js/all.js"></script>
<script type="text/JavaScript" src=" https://MomentJS.com/downloads/moment.js"></script>
<script type="text/javascript" src="/dependencies/sails.io.js"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/jszip.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/xlsx.js"></script>


<body>

  <header>
    <nav class="navbar is-transparent">
      <div class="navbar-brand">
        <a class="navbar-item" href="/">
          <img src="\images\login\compbg.png" style="max-height: 50px;">
        </a>

      </div>
      <div class="navbar-end">
        <a class="navbar-burger" id="burger">
          <span></span>
          <span></span>
          <span></span>
        </a>
        <%if (req.session.userid!=null) { %>
          <div class="navbar-menu" id="nav-links">
            <a class="navbar-item">
              <button class="button buttonlogout is-responsive" onclick="home()">
                <%= req.session.username %>
              </button>

            </a>
            <a class="navbar-item">
              <button class="button buttonlogout is-responsive" onclick="logout()">
                Logout
              </button>
            </a>
          </div>
          <%}%>
      </div>
    </nav>
    <script>
      const burgerIcon = document.getElementById("burger");
      const navbarMenu = document.getElementById("nav-links");

      burgerIcon.addEventListener("click", () => {
        navbarMenu.classList.toggle("is-active");
      })
    </script>
  </header>

</body>
<div class="allcontent">
  <%-body %>





    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    <br><br><br>
    </body>
</div>

</html>